/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var DEFAULT_SETTINGS = {
  mySetting: "",
  timesViewed: "timesViewed",
  recentlyRead: "recentlyRead",
  onceViewed: 1,
  customize: "{}"
};
function log(e) {
  if (window._debug || true) {
    console.log(e);
  }
}
function dateFormat(date, fmt) {
  let o = {
    "M+": date.getMonth() + 1,
    "d+": date.getDate(),
    "h+": date.getHours(),
    "m+": date.getMinutes(),
    "s+": date.getSeconds(),
    "q+": Math.floor((date.getMonth() + 3) / 3),
    "S": date.getMilliseconds()
  };
  if (/(y+)/.test(fmt))
    fmt = fmt.replace(RegExp.$1, (date.getFullYear() + "").substr(4 - RegExp.$1.length));
  for (let k in o)
    if (new RegExp("(" + k + ")").test(fmt)) {
      fmt = fmt.replace(RegExp.$1, RegExp.$1.length == 1 ? o[k] : ("00" + o[k]).substr(("" + o[k]).length));
    }
  return fmt;
}
var MyPlugin = class extends import_obsidian.Plugin {
  async onload() {
    const _this = this;
    await this.loadSettings();
    const app = this.app;
    app.workspace.on("file-open", (file) => {
      log(file);
      if ((file == null ? void 0 : file.extension) !== "md") {
        return;
      }
      let isExclude = false;
      this.settings.mySetting.split(",").forEach((folder) => {
        if (folder.trim() !== "" && (file == null ? void 0 : file.path.startsWith(folder.trim()))) {
          isExclude = true;
          return;
        }
      });
      if (isExclude) {
        return;
      }
      app.fileManager.processFrontMatter(file, (frontmatter) => {
        var _a;
        log(frontmatter);
        const key = _this.settings.timesViewed;
        const recentlyReadKey = _this.settings.recentlyRead;
        const count = frontmatter[key];
        const recentlyRead = frontmatter[recentlyReadKey];
        const now = dateFormat(new Date(), "yyyy-MM-dd");
        if (!count || !recentlyRead) {
          frontmatter[key] = 1;
          frontmatter[recentlyReadKey] = now;
        } else {
          const nowNumber = Number(now.replace(/-/g, ""));
          const recordNumber = Number(recentlyRead.replace(/-/g, ""));
          const onceViewed = _this.settings.onceViewed;
          if (nowNumber - recordNumber >= onceViewed) {
            log(`nowNumber:${nowNumber} - recordNumber${recordNumber} >= onceViewed:${onceViewed}`);
            frontmatter[key] += 1;
            frontmatter[recentlyReadKey] = now;
          }
        }
        const customize = JSON.parse(String((_a = this.settings.customize) != null ? _a : "{}"));
        const keys = Object.keys(customize);
        for (const key2 of keys) {
          if (frontmatter[key2] == void 0) {
            frontmatter[key2] = customize[key2];
          }
        }
      });
    });
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Metalogging");
    this.addSettingTab(new SampleSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    var _a;
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for Metalog." });
    new import_obsidian.Setting(containerEl).setName("\u6392\u9664\u7684\u6587\u4EF6").setDesc("\u4E0D\u60F3\u8BB0\u5F55\u7684\u6587\u4EF6\u540D\uFF0C\u7528\u9017\u53F7\u5206\u9694").addText((text) => text.setPlaceholder("e.g. DailyNotes, Readwise/Articles").setValue(this.plugin.settings.mySetting).onChange(async (value) => {
      log("Secret: " + value);
      this.plugin.settings.mySetting = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("timesViewed name").setDesc("\u81EA\u5B9A\u4E49\u9605\u8BFB\u6B21\u6570\u7684\u540D\u79F0").addText((text) => text.setPlaceholder("e.g. review count").setValue(this.plugin.settings.timesViewed).onChange(async (value) => {
      log("Secret: " + value);
      this.plugin.settings.timesViewed = value || DEFAULT_SETTINGS.timesViewed;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("recentlyRead name").setDesc("\u81EA\u5B9A\u4E49\u6700\u8FD1\u9605\u8BFB\u65E5\u671F\u5B57\u6BB5\u7684\u540D\u79F0").addText((text) => text.setPlaceholder("e.g. recentlyRead").setValue(this.plugin.settings.recentlyRead).onChange(async (value) => {
      log("Secret: " + value);
      this.plugin.settings.recentlyRead = value || DEFAULT_SETTINGS.recentlyRead;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(containerEl).setName("onceViewed day").setDesc("\u4E00\u6B21\u9605\u8BFB\u95F4\u9694\u591A\u4E45\u624D\u52A0\u4E00\u6B21\uFF08\u5355\u4F4D\u5929\uFF09").addText((text) => text.setPlaceholder("e.g. 1").setValue(String(this.plugin.settings.onceViewed)).onChange(async (value) => {
      log("Secret: " + value);
      this.plugin.settings.onceViewed = Number(value || DEFAULT_SETTINGS.onceViewed);
      await this.plugin.saveSettings();
    }));
    const customize = JSON.parse(String((_a = this.plugin.settings.customize) != null ? _a : "{}"));
    const keys = Object.keys(customize);
    const plugin = this.plugin;
    function newKV(oldKey = "", oldValue = "") {
      let key_str = oldKey;
      let value_str = oldValue;
      let pre_key = key_str;
      async function saveSettings() {
        var _a2;
        if (key_str != "" && value_str != "") {
          const customize2 = JSON.parse(String((_a2 = plugin.settings.customize) != null ? _a2 : "{}"));
          customize2[key_str] = value_str;
          if (pre_key != "" && pre_key != key_str) {
            delete customize2[pre_key];
            pre_key = key_str;
          }
          plugin.settings.customize = JSON.stringify(customize2);
          await plugin.saveSettings();
        }
      }
      const customizeKV = new import_obsidian.Setting(containerEl).addText((key) => {
        key.setPlaceholder("key").onChange(async (value) => {
          key_str = value;
          await saveSettings();
        });
        if (oldKey != "") {
          key.setValue(oldKey);
        }
      }).addText((value) => {
        value.setPlaceholder("value").onChange(async (value2) => {
          value_str = value2;
          await saveSettings();
        });
        if (oldValue != "") {
          value.setValue(oldValue);
        }
      });
      customizeKV.addButton((component) => {
        component.onClick(async () => {
          var _a2, _b;
          (_a2 = customizeKV.controlEl.parentElement) == null ? void 0 : _a2.removeChild(customizeKV.controlEl);
          const customize2 = JSON.parse(String((_b = plugin.settings.customize) != null ? _b : "{}"));
          if (customize2[key_str] != void 0) {
            delete customize2[key_str];
          }
          if (customize2[pre_key] != void 0) {
            delete customize2[pre_key];
          }
          plugin.settings.customize = JSON.stringify(customize2);
          await plugin.saveSettings();
        }).setButtonText("\u5220\u9664");
      });
    }
    new import_obsidian.Setting(containerEl).addButton((component) => {
      component.onClick(() => {
        newKV();
      }).setButtonText("\u6DFB\u52A0");
    });
    for (const key of keys) {
      newKV(key, customize[key]);
    }
  }
};
